import PropTypes from "prop-types";
import Swal from "sweetalert2";
import { requisicaoPost } from "../../services/requisicoes";
import { toast } from "react-toastify";
import { AuthContext } from "../../context/AuthContext";

import { useEffect, useState, useContext } from "react";
import Loading from "../Loading";

function Step3({ mercadoPagoDados, setDadosCodigo, handleClose, handleContinue }) {
  const { logout } = useContext(AuthContext);
  const [loading, setLoading] = useState(false);

  const pixCopiaEcola = mercadoPagoDados?.CopiaECola || "";
  const pixQrCode = mercadoPagoDados?.QRCodeBase64 || "";
  const paymentId = mercadoPagoDados?.paymentId || "";
  const tituloPedido = mercadoPagoDados?.tituloPedido || "";
  const total = mercadoPagoDados?.valorPagamento || 0;

  // Verifica se os dados estão disponíveis
  useEffect(() => {
    if (pixCopiaEcola === "" && pixQrCode === "") {
      handleClose();
      Swal.fire("Tente novamente mais tarde", "", "error");
    }
  }, [pixCopiaEcola, pixQrCode, handleClose]);

  // Consulta de pagamento automática
  useEffect(() => {
    setLoading(true);

    const verificarPagamento = async () => {
      const response = await requisicaoPost("/Backend/Checkout/consulta-pedido.php", {
        idPedido: paymentId,
      });

      console.log(response.data.pedido);

      if (response.data.success) {
        const pedido = response.data.pedido;

        if (pedido.status !== "pendente" && pedido.codigoderecarga !== "") {
          setDadosCodigo({
            servidor: pedido.servidor,
            codigoderecarga: pedido.codigoderecarga,
            idPedido: pedido.id,
          });
          setLoading(false);
          handleContinue(4);
        }
      }
    };

    const interval = setInterval(verificarPagamento, 3000);
    return () => clearInterval(interval);
  }, [paymentId, handleContinue, setDadosCodigo, logout]);

  return (
    <div className="p-4">
      <h3 className="text-xl font-bold leading-6 text-gray-900 mb-4">
        Pagamento
      </h3>

      <div className="border-t border-gray-200 pt-4">
        <h4 className="text-lg font-semibold mb-2">Qr Code</h4>
        <QRCodeDisplay pixQrCode={pixQrCode} />
        <PedidoInfo titulo={tituloPedido} total={total} />
        <PixCodeDisplay pixCopiaEcola={pixCopiaEcola} />
        <CopyButton pixCopiaEcola={pixCopiaEcola} />

        {loading && <AguardandoPagamento />}
      </div>
    </div>
  );
}

Step3.propTypes = {
  mercadoPagoDados: PropTypes.object,
  setDadosCodigo: PropTypes.func,
  handleFinish: PropTypes.func,
  handleContinue: PropTypes.func,
  handleClose: PropTypes.func,
};

export default Step3;

// COMPONENTES INTERNOS

function QRCodeDisplay({ pixQrCode }) {
  return pixQrCode ? (
    <img
      src={`data:image/png;base64,${pixQrCode}`}
      alt="Qr Code"
      className="w-80 h-80 mx-auto mt-4 shadow-lg rounded-lg object-contain"
    />
  ) : (
    <p className="text-center text-gray-500">QR Code não disponível</p>
  );
}

QRCodeDisplay.propTypes = {
  pixQrCode: PropTypes.string.isRequired,
};

function PedidoInfo({ titulo, total }) {
  return (
    <>
      <h1 className="text-center text-gray-500 mt-4 font-semibold">
        Escaneie o código QR ou copie o código e cole no seu app de pagamento
      </h1>
      <h1 className="text-center text-gray-500 mt-4 font-semibold text-2xl text-green-500">
        {titulo} - R$ {(total ?? 0).toFixed(2)}
      </h1>
    </>
  );
}

PedidoInfo.propTypes = {
  titulo: PropTypes.string.isRequired,
  total: PropTypes.number.isRequired,
};

function PixCodeDisplay({ pixCopiaEcola }) {
  return (
    <textarea
      name="copiaECola"
      id="copiaECola"
      className="w-full p-2 mt-4 border border-gray-600 rounded-md resize-none"
      value={pixCopiaEcola}
      readOnly
      rows={4}
      style={{
        border: "none",
        backgroundColor: "#f2f2f2",
      }}
    />
  );
}

PixCodeDisplay.propTypes = {
  pixCopiaEcola: PropTypes.string.isRequired,
};

function CopyButton({ pixCopiaEcola }) {
  const handleCopy = () => {
    navigator.clipboard.writeText(pixCopiaEcola);
    toast.success("Código copiado para a área de transferência");
  };

  return (
    <div className="mt-6 flex justify-end">
      <button
        onClick={handleCopy}
        className="w-full px-4 py-2 text-sm font-medium rounded-md cursor-pointer transition-colors duration-300"
        style={{
          backgroundColor: "var(--corPrincipal)",
          color: "var(--corTexto1)",
        }}
        onMouseOver={(e) =>
          (e.currentTarget.style.backgroundColor = "var(--corSecundaria)")
        }
        onMouseOut={(e) =>
          (e.currentTarget.style.backgroundColor = "var(--corPrincipal)")
        }
      >
        Copiar
      </button>
    </div>
  );
}

CopyButton.propTypes = {
  pixCopiaEcola: PropTypes.string.isRequired,
};

function AguardandoPagamento() {
  return (
    <div className="flex flex-col items-center justify-center gap-2 mt-4">
      <Loading color="var(--corPrincipal)" style={{ scale: "0.3" }} />
      <p className="text-sm text-gray-600">Aguardando o pagamento...</p>
    </div>
  );
}
